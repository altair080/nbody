######################################################################################
####################                    nbody 			  ####################
######################################################################################

nbody is a simple n-body code written in C, parallelized with OpenMP for shared-memory systems and 
utilizing the SDL2 library for graphical output, making it a handy tool to run interactive 
n-body simulations for both scientific and educational purposes.

Author: Marcel VÃ¶lschow, Hamburg Observatory

Current release: 0.2 ALPHA

### Changelog ###
04.01.2017:   	- nbody 0.1 ALPHA released

18.01.2017:   	- VSYNC switch added
              	- Integrator switch added
              	- Object icon (Sun, Mercury, Earth, Jupiter) can be specified
              	- Object icon size can be customized in the init_bodies procedure

20.01.2017:	- RKN5 implemented (stability tests pending)

22.01.2017:	- Total energy conservation check implemented (CMS motion not considered yet)
		- High CPU load in pause mode bug fixed

23.01.2017:	- Numerical stats output implemented 
		- Code cleanups

24.01.2017:	- RKN5 stability tests completed
		- RKN5 performance optimized
		- Right-click object info box deactivated (buggy)
		- More rigerous truncation error calculation method (minimum fe)
		- Timestep smoothing option added

31.01.2017:	- Minor code cleanups
		- Interactive mode switch implemented
		- CMS options added

01.02.2017:	- Minor RKN5 optimizations
		- RKN5 parallelized
		- Number of threads can be specified
		- Code cleanups 
		- examples.c added

06.02.2017:	- New example setup added

### How to get started ###
Download the repository zip, unpack the archive, open a terminal and type "make".
The GNU C compiler gcc, SDL2 and SDL2_ttf must be present.

### Running a simulation ###
At this very early stage of the project, both the settings and the simulation setup are hard-coded in the setup.c module. 
The main program calls the "init_bodies" routine that can be found and modified in the setup.c file. 
For a quick start, simply call one of the example setups you can find in the examples.c file. 
A full description on how to get started will be provided with the first official release of the code.
